/*Jarod-Joy Villapando
 *CPSC 245
 *Memory Allocation
 */

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

public class MemAlloc 
{

	public static void main(String[] args) 
	{
		checkArgumentForHelp(args);
		checkForArgumentsLength(args);
		ArrayList<Integer> holes = checkFirstCommandArgumentForFileInput(args);
		ArrayList<Integer> processes = checkSecondCommandArgumentForFileInput(args);
		String chosenAlgorithm = checkThirdArgumentForAlgo(args);
		printFilesBeingUsed(args);
		printInitalConditionsForHoles(holes);
		printInitialConditionsForProcesses(processes);
		executeChosenAlgorithm(chosenAlgorithm, holes, processes); 
	
		System.exit(0);
		

	}
	
	
	public static void checkArgumentForHelp(String[] args)
	{
		for(int i = 0; i < args.length; i++)
		{
			if(args[i].equalsIgnoreCase("H"))
			{
				System.out.println("memAlloc holeFile procFile first|best|worst");
				System.out.println("* indicates change was made to memory hole");
			}
		}
	}
	
	
	public static void checkForArgumentsLength(String[] args)
	{
		if(args.length > 3)
		{
			System.err.println("** ERROR: Too many command line args");
			System.exit(1);
		}
		
		if(args.length < 3)
		{
			System.err.println("** ERROR: Too few command line args");
			System.exit(2);
		}
	}
	
	
	public static ArrayList<Integer> checkFirstCommandArgumentForFileInput(String[] args)
	{
		Scanner scanner;
		ArrayList<Integer> holes = new ArrayList<>();
		
		try
		{
			File file = new File(args[0]);
			scanner = new Scanner(file);
			
			while(scanner.hasNext())
			{
				int currentLine;
				try
				{
					currentLine = Integer.parseInt(scanner.nextLine());
					holes.add(currentLine);
				}
				catch(Exception exc)
				{
					System.err.println("** ERROR: Contents of " + args[0] + " must be numerical");
					System.exit(4);
				}
				
			}
			scanner.close();
		}
		catch(FileNotFoundException e)
		{
			System.err.println("** ERROR: " + args[0] + " could not be found");
			System.exit(3);
		}
	
		return holes;
	}
	
	
	public static ArrayList<Integer> checkSecondCommandArgumentForFileInput(String[] args)
	{
		ArrayList<Integer> processes = new ArrayList<>();
		Scanner scanner;
		
		try
		{
			File file = new File(args[1]);
			scanner = new Scanner(file);
			
			while(scanner.hasNextLine())
			{
				String[] currentLine = scanner.nextLine().split(" +");
				String position = currentLine[0].substring(1);
				String processesSize = currentLine[1];
				int numericalProcessSize;
				try
				{
					numericalProcessSize = Integer.parseInt(processesSize);
					processes.add(numericalProcessSize);
				}
				catch(Exception exce)
				{
					System.err.println("** ERROR: Contents of " + args[1] + " must be numerical");
					System.exit(6);
				}
			}
			scanner.close();
		}
		catch(FileNotFoundException e)
		{
			System.err.println("** ERROR: " + args[0] + " could not be found");
			System.exit(5);
		}
		
		return processes;
	}
	
	
	public static String checkThirdArgumentForAlgo(String[] args)
	{
		if(!(args[2].equalsIgnoreCase("first") || (args[2].equalsIgnoreCase("best")
				|| (args[2].equalsIgnoreCase("worst")))))
		{
			System.err.println("** ERROR: incorrect third argument");
			System.exit(7);
		}
		
		return args[2];
	}
	
	
	public static void printFilesBeingUsed(String[] args)
	{
		System.out.printf("Using files \"%s\" and \"%s\".\n", args[0], args[1]);
	}
	
	
	public static void printInitalConditionsForHoles(ArrayList <Integer> holes)
	{
		System.out.printf("\nInitial Conditions\n\n");
		System.out.printf("Holes\n");
		for(int i = 0; i < holes.size(); i++)
		{
			System.out.printf("H%d: %5d K\n", i, holes.get(i));
		}
	}
	
	
	public static void printInitialConditionsForProcesses(ArrayList<Integer> processes)
	{
		System.out.printf("\nProcs\n");
		for(int i = 0; i < processes.size(); i++)
		{
			System.out.printf("P%d: %5d K\n", i + 1, processes.get(i));
		}
	}
	
	public static void executeChosenAlgorithm(String chosenAlgorithm, ArrayList<Integer> holes, 
			ArrayList<Integer> processes)
	{
		if(chosenAlgorithm.equalsIgnoreCase("first"))
		{
			executeFirstFitAlgorithm(holes, processes);
		}
		/*
		else if(chosenAlgorithm.equalsIgnoreCase("best"))
		{
			
		}
		else
		{
			
		}
		*/
	}
	
	public static void executeFirstFitAlgorithm(ArrayList<Integer> holes, ArrayList<Integer> processes)
	{
		int newValue = 0;
		ArrayList <Integer> holesIndexes = new ArrayList<>();
		
		for(int i = 0; i < processes.size(); i++)
		{
			for(int j = 0; i < holes.size(); j++)
			{
				if(holes.get(j) < processes.get(i))
				{
					newValue = holes.get(j) - processes.get(i);
					holes.add(i, newValue);
					holesIndexes.add(i);
					i = 0;
				}
			}
		}
		System.out.println(holesIndexes);
	}
}
